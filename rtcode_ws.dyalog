:Namespace RayTracer
⍝ === VARIABLES ===

EPSILON←0.00001

EVAL_REFLECTION←1

EVAL_REFRACTION←1

FALSE←0

INFINITY←9.9E99

MAX_RECURSION←5

TRUE←1

Z←(0.68493876830877 0.6164448914778929 0.6164448914778929) (0.6847236667550318 0.6162513000795287 0.6162513000795287) (0.6845084939998441 0.6160576445998598 0.6160576445998598) (0.6842932506280286 0.6158639255652257 0.6158639255652257) (0.6840779372232131 0.6156701435008918 0.6156701435008918) (0.6838625543678257 0.6154762989310432 0.6154762989310432) (0.683647102643099 0.6152823923787891 0.6152823923787891) (0.6834315826290642 0.6150884243661578 0.6150884243661578) (0.6832159949045548 0.6148943954140993 0.6148943954140993) (0.6830003400472027 0.6147003060424824 0.6147003060424824) (0.6827846186334389 0.614506156770095 0.614506156770095) (0.6825688312384907 0.6143119481146416 0.6143119481146416) (0.6823529784363856 0.6141176805927471 0.6141176805927471) (0.6821370607999448 0.6139233547199504 0.6139233547199504) (0.6819210789007857 0.6137289710107071 0.6137289710107071) (0.6817050333093219 0.6135345299783896 0.6135345299783896) (0.6814889245947601 0.6133400321352841 0.6133400321352841) (0.6812727533251012 0.6131454779925911 0.6131454779925911) (0.6810565200671383 0.6129508680604245 0.6129508680604245) (0.6808402253864584 0.6127562028478125 0.6127562028478125) (0.6806238698474388 0.612561482862695 0.612561482862695) (0.6804074540132488 0.6123667086119239 0.6123667086119239) (0.6801909784458477 0.6121718806012629 0.6121718806012629) (0.6799744437059856 0.6119769993353871 0.6119769993353871) (0.679757850353201 0.6117820653178809 0.6117820653178809) (0.6795411989458229 0.6115870790512405 0.6115870790512405) (0.6793244900409677 0.611392041036871 0.611392041036871) (0.67910772419454 0.611196951775086 0.611196951775086) (0.6788909019612325 0.6110018117651093 0.6110018117651093) (0.6786740238945239 0.6108066215050715 0.6108066215050715) (0.678457090546681 0.6106113814920129 0.6106113814920129) (0.6782401024687552 0.6104160922218796 0.6104160922218796) (0.6780230602105854 0.6102207541895269 0.6102207541895269) (0.6778059643207953 0.6100253678887158 0.6100253678887158) (0.6775888153467934 0.609829933812114 0.609829933812114) (0.6773716138347732 0.6096344524512959 0.6096344524512959) (0.6771543603297131 0.6094389242967418 0.6094389242967418) (0.6769370553753746 0.6092433498378371 0.6092433498378371) (0.6767196995143046 0.6090477295628741 0.6090477295628741) (0.6765022932878322 0.608852063959049 0.608852063959049) (0.67628483723607 0.608656353512463 0.608656353512463) (0.6760673318979145 0.608460598708123 0.608460598708123) (0.6758497778110448 0.6082648000299403 0.6082648000299403) (0.6756321755119213 0.6080689579607292 0.6080689579607292) (0.6754145255357882 0.6078730729822094 0.6078730729822094) (0.6751968284166715 0.6076771455750044 0.6076771455750044) (0.6749790846873798 0.6074811762186418 0.6074811762186418) (0.6747612948795028 0.6072851653915525 0.6072851653915525) (0.6745434595234122 0.607089113571071 0.607089113571071) (0.674325579148262 0.6068930212334358 0.6068930212334358) (0.6741076542819869 0.6066968888537883 0.6066968888537883) (0.6738896854513041 0.6065007169061737 0.6065007169061737) (0.6736716731817108 0.6063045058635398 0.6063045058635398) (0.6734536179974874 0.6061082561977387 0.6061082561977387) (0.6732355204216939 0.6059119683795245 0.6059119683795245) (0.6730173809761726 0.6057156428785553 0.6057156428785553) (0.672799200181547 0.6055192801633923 0.6055192801633923) (0.6725809785572214 0.6053228807014993 0.6053228807014993) (0.6723627166213826 0.6051264449592443 0.6051264449592443) (0.6721444148909971 0.6049299734018974 0.6049299734018974) (0.671926073881814 0.6047334664936326 0.6047334664936326) (0.6717076941083642 0.6045369246975277 0.6045369246975277) (0.6714892760839581 0.6043403484755623 0.6043403484755623) (0.6712708203206907 0.6041437382886217 0.6041437382886217) (0.6710523273294369 0.6039470945964932 0.6039470945964932) (0.6708337976198536 0.6037504178578683 0.6037504178578683) (0.6706152317003805 0.6035537085303425 0.6035537085303425) (0.6703966300782388 0.603356967070415 0.603356967070415) (0.6701779932594325 0.6031601939334893 0.6031601939334893) (0.6699593217487484 0.6029633895738735 0.6029633895738735) (0.6697406160497548 0.6027665544447793 0.6027665544447793) (0.6695218766648044 0.602569688998324 0.602569688998324) (0.6693031040950327 0.6023727936855294 0.6023727936855294) (0.6690842988403585 0.6021758689563226 0.6021758689563226) (0.668865461399484 0.6019789152595356 0.6019789152595356) (0.6686465922698956 0.6017819330429061 0.6017819330429061) (0.6684276919478643 0.601584922753078 0.601584922753078) (0.6682087609284453 0.6013878848356008 0.6013878848356008) (0.6679897997054787 0.6011908197349308 0.6011908197349308) (0.6677708087715898 0.6009937278944308 0.6009937278944308) (0.6675517886181892 0.6007966097563703 0.6007966097563703) (0.6673327397354741 0.6005994657619267 0.6005994657619267) (0.6671136626124267 0.600402296351184 0.600402296351184) (0.6668945577368168 0.6002051019631351 0.6002051019631351) (0.6666754255952012 0.6000078830356811 0.6000078830356811) (0.6664562666729235 0.5998106400056311 0.5998106400056311) (0.6662370814541154 0.5996133733087039 0.5996133733087039) (0.6660178704216971 0.5994160833795275 0.5994160833795275) (0.6657986340573769 0.5992187706516392 0.5992187706516392) (0.6655793728416529 0.5990214355574877 0.5990214355574877) (0.6653600872538125 0.5988240785284312 0.5988240785284312) (0.665140777771933 0.5986266999947397 0.5986266999947397) (0.6649214448728828 0.5984293003855946 0.5984293003855946) (0.6647020890323209 0.5982318801290888 0.5982318801290888) (0.6644827107246981 0.5980344396522284 0.5980344396522284) (0.6642633104232577 0.5978369793809319 0.5978369793809319) (0.6640438886000348 0.5976394997400314 0.5976394997400314) (0.6638244457258587 0.5974420011532728 0.5974420011532728) (0.6636049822703521 0.597244484043317 0.597244484043317) (0.6633854987019321 0.5970469488317389 0.5970469488317389) (0.6631659954878104 0.5968493959390294 0.5968493959390294) (0.662946473093995 0.5966518257845955 0.5966518257845955) (0.6627269319852899 0.5964542387867608 0.5964542387867608) (0.6625073726252958 0.5962566353627662 0.5962566353627662) (0.6622877954764106 0.5960590159287695 0.5960590159287695) (0.6620682009998309 0.5958613808998477 0.5958613808998477) (0.6618485896555516 0.5956637306899965 0.5956637306899965) (0.6616289619023674 0.5954660657121307 0.5954660657121307) (0.6614093181978733 0.595268386378086 0.595268386378086) (0.6611896589984644 0.5950706930986179 0.5950706930986179) (0.6609699847593379 0.5948729862834041 0.5948729862834041) (0.6607502959344934 0.5946752663410441 0.5946752663410441) (0.6605305929767334 0.5944775336790601 0.5944775336790601) (0.6603108763376636 0.5942797887038973 0.5942797887038973) (0.6600911464676952 0.5940820318209257 0.5940820318209257) (0.6598714038160437 0.5938842634344393 0.5938842634344393) (0.6596516488307312 0.5936864839476581 0.5936864839476581) (0.6594318819585868 0.5934886937627282 0.5934886937627282) (0.6592121036452467 0.593290893280722 0.593290893280722) (0.6589923143351557 0.5930930829016401 0.5930930829016401) (0.6587725144715683 0.5928952630244114 0.5928952630244114) (0.6585527044965482 0.5926974340468935 0.5926974340468935) (0.6583328848509712 0.5924995963658741 0.5924995963658741) (0.6581130559745233 0.592301750377071 0.592301750377071) (0.6578932183057048 0.5921038964751343 0.5921038964751343) (0.6576733722818288 0.5919060350536459 0.5919060350536459) (0.6574535183390223 0.5917081665051201 0.5917081665051201) (0.6572336569122283 0.5915102912210055 0.5915102912210055) (0.6570137884352059 0.5913124095916853 0.5913124095916853) (0.6567939133405308 0.5911145220064777 0.5911145220064777) (0.656574032059597 0.5909166288536373 0.5909166288536373) (0.6563541450226175 0.5907187305203557 0.5907187305203557) (0.6561342526586256 0.590520827392763 0.590520827392763) (0.6559143553954743 0.5903229198559269 0.5903229198559269) (0.6556944536598396 0.5901250082938556 0.5901250082938556) (0.6554745478772197 0.5899270930894978 0.5899270930894978) (0.6552546384719364 0.5897291746247428 0.5897291746247428) (0.6550347258671367 0.5895312532804231 0.5895312532804231) (0.6548148104847931 0.5893333294363138 0.5893333294363138) (0.6545948927457046 0.5891354034711341 0.5891354034711341) (0.6543749730694984 0.5889374757625486 0.5889374757625486) (0.6541550518746305 0.5887395466871675 0.5887395466871675) (0.6539351295783864 0.5885416166205478 0.5885416166205478) (0.6537152065968824 0.5883436859371942 0.5883436859371942) (0.6534952833450672 0.5881457550105605 0.5881457550105605) (0.6532753602367221 0.5879478242130499 0.5879478242130499) (0.6530554376844626 0.5877498939160164 0.5877498939160164) (0.6528355160997396 0.5875519644897657 0.5875519644897657) (0.6526155958928394 0.5873540363035554 0.5873540363035554) (0.6523956774728868 0.5871561097255982 0.5871561097255982) (0.6521757612478446 0.5869581851230602 0.5869581851230602) (0.6519558476245144 0.586760262862063 0.586760262862063) (0.6517359370085392 0.5865623433076853 0.5865623433076853) (0.6515160298044044 0.586364426823964 0.586364426823964) (0.6512961264154368 0.5861665137738932 0.5861665137738932) (0.651076227243809 0.5859686045194281 0.5859686045194281) (0.6508563326905376 0.5857706994214839 0.5857706994214839) (0.6506364431554857 0.5855727988399372 0.5855727988399372) (0.6504165590373656 0.585374903133629 0.585374903133629) (0.650196680733736 0.5851770126603625 0.5851770126603625) (0.649976808641007 0.5849791277769064 0.5849791277769064) (0.6497569431544404 0.5847812488389964 0.5847812488389964) (0.6495370846681487 0.5845833762013339 0.5845833762013339) (0.6493172335750995 0.5843855102175896 0.5843855102175896) (0.6490973902671144 0.5841876512404031 0.5841876512404031) (0.6488775551348718 0.5839897996213846 0.5839897996213846) (0.6486577285679056 0.5837919557111151 0.5837919557111151) (0.6484379109546113 0.5835941198591502 0.5835941198591502) (0.6482181026822411 0.583396292414017 0.583396292414017) (0.6479983041369104 0.5831984737232194 0.5831984737232194) (0.6477785157035953 0.5830006641332358 0.5830006641332358) (0.6475587377661366 0.582802863989523 0.582802863989523) (0.6473389707072402 0.5826050736365163 0.5826050736365163) (0.6471192149084768 0.5824072934176291 0.5824072934176291) (0.6468994707502863 0.5822095236752577 0.5822095236752577) (0.6466797386119753 0.5820117647507778 0.5820117647507778) (0.6464600188717226 0.5818140169845504 0.5818140169845504) (0.6462403119065768 0.5816162807159192 0.5816162807159192) (0.6460206180924601 0.5814185562832141 0.5814185562832141) (0.6458009378041686 0.5812208440237517 0.5812208440237517) (0.6455812714153738 0.5810231442738365 0.5810231442738365) (0.6453616192986232 0.5808254573687609 0.5808254573687609) (0.6451419818253437 0.5806277836428093 0.5806277836428093) (0.6449223593658403 0.5804301234292563 0.5804301234292563) (0.6447027522892997 0.5802324770603698 0.5802324770603698) (0.6444831609637912 0.5800348448674121 0.5800348448674121) (0.6442635857562666 0.57983722718064 0.57983722718064) (0.6440440270325626 0.5796396243293064 0.5796396243293064) (0.6438244851574032 0.5794420366416629 0.5794420366416629) (0.6436049604943994 0.5792444644449595 0.5792444644449595) (0.6433854534060516 0.5790469080654465 0.5790469080654465) (0.6431659642537515 0.5788493678283764 0.5788493678283764) (0.6429464933977808 0.5786518440580027 0.5786518440580027) (0.6427270411973166 0.578454337077585 0.578454337077585) (0.6425076080104298 0.5782568472093869 0.5782568472093869) (0.6422881941940874 0.5780593747746787 0.5780593747746787) (0.6420688001041557 0.5778619200937402 0.5778619200937402) (0.6418494260953976 0.5776644834858579 0.5776644834858579) (0.6416300725214787 0.5774670652693309 0.5774670652693309) (0.6414107397349655 0.577269665761469 0.577269665761469) (0.6411914280873288 0.5770722852785959 0.5770722852785959) (0.6409721379289435 0.5768749241360491 0.5768749241360491) (0.6407528696090915 0.5766775826481824 0.5766775826481824) (0.6405336234759633 0.576480261128367 0.576480261128367) (0.6403143998766572 0.5762829598889915 0.5762829598889915) (0.6400951991571838 0.5760856792414655 0.5760856792414655) (0.6398760216624656 0.575888419496219 0.575888419496219) (0.639656867736339 0.5756911809627051 0.5756911809627051) (0.6394377377215561 0.5754939639494006 0.5754939639494006) (0.6392186319597849 0.5752967687638064 0.5752967687638064) (0.6389995507916144 0.575099595712453 0.575099595712453) (0.638780494556551 0.5749024451008958 0.5749024451008958) (0.6385614635930227 0.5747053172337204 0.5747053172337204) (0.6383424582383824 0.5745082124145442 0.5745082124145442) (0.6381234788289059 0.5743111309460153 0.5743111309460153) (0.637904525699796 0.5741140731298164 0.5741140731298164) (0.6376855991851835 0.5739170392666652 0.5739170392666652) (0.6374666996181273 0.5737200296563146 0.5737200296563146) (0.6372478273306174 0.5735230445975557 0.5735230445975557) (0.6370289826535768 0.5733260843882191 0.5733260843882191) (0.6368101659168611 0.573129149325175 0.573129149325175) (0.6365913774492634 0.5729322397043372 0.5729322397043372) (0.6363726175785126 0.5727353558206614 0.5727353558206614) (0.6361538866312757 0.5725384979681482 0.5725384979681482) (0.635935184933161 0.572341666439845 0.572341666439845) (0.6357165128087185 0.5721448615278467 0.5721448615278467) (0.6354978705814406 0.5719480835232965 0.5719480835232965) (0.6352792585737668 0.5717513327163901 0.5717513327163901) (0.6350606771070799 0.5715546093963719 0.5715546093963719) (0.6348421265017146 0.5713579138515431 0.5713579138515431) (0.6346236070769531 0.5711612463692578 0.5711612463692578) (0.6344051191510293 0.5709646072359263 0.5709646072359263) (0.6341866630411309 0.5707679967370178 0.5707679967370178) (0.6339682390633994 0.5705714151570594 0.5705714151570594) (0.6337498475329344 0.570374862779641 0.570374862779641) (0.6335314887637907 0.5701783398874117 0.5701783398874117) (0.633313163068985 0.5699818467620865 0.5699818467620865) (0.6330948707604938 0.5697853836844444 0.5697853836844444) (0.6328766121492578 0.569588950934332 0.569588950934332) (0.6326583875451808 0.5693925487906627 0.5693925487906627) (0.6324401972571337 0.5691961775314204 0.5691961775314204) (0.632222041592955 0.5689998374336596 0.5689998374336596) (0.6320039208594523 0.5688035287735071 0.5688035287735071) (0.6317858353624052 0.5686072518261647 0.5686072518261647) (0.6315677854065642 0.5684110068659078 0.5684110068659078) (0.6313497712956573 0.5682147941660916 0.5682147941660916) (0.6311317933323854 0.5680186139991469 0.5680186139991469) (0.63091385181843 0.567822466636587 0.567822466636587) (0.6306959470544508 0.5676263523490057 0.5676263523490057) (0.6304780793400881 0.5674302714060794 0.5674302714060794) (0.6302602489739647 0.5672342240765683 0.5672342240765683) (0.6300424562536907 0.5670382106283217 0.5670382106283217) (0.629824701475861 0.5668422313282749 0.5668422313282749) (0.6296069849360556 0.5666462864424501 0.5666462864424501) (0.6293893069288483 0.5664503762359635 0.5664503762359635) (0.6291716677478031 0.5662545009730228 0.5662545009730228) (0.6289540676854749 0.5660586609169275 0.5660586609169275) (0.6287365070334158 0.5658628563300743 0.5658628563300743) (0.6285189860821736 0.5656670874739562 0.5656670874739562) (0.6283015051212939 0.5654713546091645 0.5654713546091645) (0.6280840644393224 0.5652756579953901 0.5652756579953901) (0.6278666643238072 0.5650799978914265 0.5650799978914265) (0.627649305061297 0.5648843745551674 0.5648843745551674) (0.627431986937349 0.5646887882436141 0.5646887882436141) (0.6272147102365256 0.5644932392128731 0.5644932392128731) (0.6269974752423965 0.5642977277181569 0.5642977277181569) (0.6267802822375441 0.5641022540137898 0.5641022540137898) (0.6265631315035615 0.5639068183532053 0.5639068183532053) (0.626346023321054 0.5637114209889487 0.5637114209889487) (0.6261289579696457 0.5635160621726812 0.5635160621726812) (0.6259119357279752 0.5633207421551777 0.5633207421551777) (0.6256949568737004 0.5631254611863303 0.5631254611863303) (0.6254780216835004 0.5629302195151504 0.5629302195151504) (0.6252611304330775 0.5627350173897698 0.5627350173897698) (0.6250442833971561 0.5625398550574405 0.5625398550574405) (0.6248274808494881 0.5623447327645393 0.5623447327645393) (0.6246107230628521 0.562149650756567 0.562149650756567) (0.6243940103090577 0.561954609278152 0.561954609278152) (0.6241773428589448 0.5617596085730503 0.5617596085730503) (0.6239607209823849 0.5615646488841464 0.5615646488841464) (0.6237441449482853 0.5613697304534568 0.5613697304534568) (0.6235276150245914 0.5611748535221323 0.5611748535221323) (0.6233111314782835 0.5609800183304552 0.5609800183304552) (0.623094694575385 0.5607852251178466 0.5607852251178466) (0.6228783045809584 0.5605904741228626 0.5605904741228626) (0.6226619617591137 0.5603957655832024 0.5603957655832024) (0.6224456663730009 0.5602010997357009 0.5602010997357009) (0.6222294186848211 0.560006476816339 0.560006476816339) (0.6220132189558228 0.5598118970602406 0.5598118970602406) (0.6217970674463064 0.5596173607016758 0.5596173607016758) (0.6215809644156227 0.5594228679740605 0.5594228679740605) (0.6213649101221772 0.5592284191099595 0.5592284191099595) (0.6211489048234325 0.5590340143410893 0.5590340143410893) (0.62093294877591 0.558839653898319 0.558839653898319) (0.6207170422351872 0.5586453380116685 0.5586453380116685) (0.6205011854559043 0.5584510669103139 0.5584510669103139) (0.620285378691768 0.5582568408225913 0.5582568408225913) (0.6200696221955457 0.5580626599759911 0.5580626599759911) (0.6198539162190723 0.5578685245971651 0.5578685245971651) (0.6196382610132524 0.5576744349119271 0.5576744349119271) (0.6194226568280627 0.5574803911452565 0.5574803911452565) (0.6192071039125471 0.5572863935212924 0.5572863935212924) (0.6189916025148268 0.5570924422633441 0.5570924422633441) (0.6187761528820983 0.5568985375938885 0.5568985375938885) (0.6185607552606357 0.5567046797345722 0.5567046797345722) (0.6183454098957925 0.5565108689062133 0.5565108689062133) (0.6181301170320024 0.5563171053288022 0.5563171053288022) (0.6179148769127816 0.5561233892215034 0.5561233892215034) (0.6176996897807349 0.5559297208026615 0.5559297208026615) (0.6174845558775489 0.555736100289794 0.555736100289794) (0.617269475444 0.5555425278996 0.5555425278996) (0.6170544487199567 0.555349003847961 0.555349003847961) (0.616839475944377 0.5551555283499394 0.5551555283499394) (0.616624557355314 0.5549621016197825 0.5549621016197825) (0.6164096931899162 0.5547687238709247 0.5547687238709247) (0.6161948836844282 0.5545753953159854 0.5545753953159854) (0.6159801290741969 0.5543821161667772 0.5543821161667772) (0.6157654295936678 0.554188886634301 0.554188886634301) (0.6155507854763873 0.5539957069287486 0.5539957069287486) (0.6153361969550121 0.5538025772595109 0.5538025772595109) (0.6151216642613011 0.553609497835171 0.553609497835171) (0.6149071876261202 0.5534164688635081 0.5534164688635081) (0.6146927672794505 0.5532234905515055 0.5532234905515055) (0.6144784034503822 0.553030563105344 0.553030563105344) (0.6142640963671171 0.5528376867304055 0.5528376867304055) (0.6140498462569762 0.5526448616312787 0.5526448616312787) (0.6138356533463969 0.5524520880117573 0.5524520880117573) (0.6136215178609341 0.5522593660748407 0.5522593660748407) (0.6134074400252637 0.5520666960227374 0.5520666960227374) (0.6131934200631878 0.551874078056869 0.551874078056869) (0.6129794581976288 0.5516815123778659 0.5516815123778659) (0.6127655546506395 0.5514889991855756 0.5514889991855756) (0.612551709643397 0.5512965386790574 0.5512965386790574) (0.6123379233962125 0.5511041310565913 0.5511041310565913) (0.612124196128525 0.5509117765156725 0.5509117765156725) (0.6119105280589112 0.5507194752530201 0.5507194752530201) (0.6116969194050812 0.550527227464573 0.550527227464573) (0.6114833703838821 0.5503350333454939 0.5503350333454939) (0.6112698812112995 0.5501428930901696 0.5501428930901696) (0.6110564521024651 0.5499508068922185 0.5499508068922185) (0.6108430832716474 0.5497587749444827 0.5497587749444827) (0.6106297749322618 0.5495667974390356 0.5495667974390356) (0.6104165272968706 0.5493748745671836 0.5493748745671836) (0.6102033405771831 0.5491830065194648 0.5491830065194648) (0.6099902149840618 0.5489911934856556 0.5489911934856556) (0.6097771507275161 0.5487994356547645 0.5487994356547645) (0.6095641480167141 0.5486077332150427 0.5486077332150427) (0.6093512070599775 0.5484160863539798 0.5484160863539798) (0.609138328064783 0.5482244952583047 0.5482244952583047) (0.6089255112377714 0.5480329601139943 0.5480329601139943) (0.6087127567847399 0.547841481106266 0.547841481106266) (0.6085000649106518 0.5476500584195866 0.5476500584195866) (0.6082874358196327 0.5474586922376695 0.5474586922376695) (0.6080748697149777 0.54726738274348 0.54726738274348) (0.6078623667991463 0.5470761301192317 0.5470761301192317) (0.6076499272737705 0.5468849345463935 0.5468849345463935) (0.607437551339655 0.5466937962056896 0.5466937962056896) (0.6072252391967756 0.546502715277098 0.546502715277098) (0.607012991044289 0.5463116919398601 0.5463116919398601) (0.6068008070805198 0.5461207263724678 0.5461207263724678) (0.6065886875029793 0.5459298187526814 0.5459298187526814) (0.6063766325083606 0.5457389692575245 0.5457389692575245) (0.606164642292536 0.5455481780632824 0.5455481780632824) (0.6059527170505603 0.5453574453455043 0.5453574453455043) (0.6057408569766816 0.5451667712790135 0.5451667712790135) (0.6055290622643315 0.5449761560378983 0.5449761560378983) (0.605317333106132 0.5447855997955189 0.5447855997955189) (0.6051056696939007 0.5445951027245106 0.5445951027245106) (0.6048940722186422 0.544404664996778 0.544404664996778) (0.6046825408705608 0.5442142867835048 0.5442142867835048) (0.6044710758390616 0.5440239682551554 0.5440239682551554) (0.6042596773127409 0.5438337095814668 0.5438337095814668) (0.6040483454794021 0.5436435109314619 0.5436435109314619) (0.6038370805260489 0.543453372473444 0.543453372473444) (0.6036258826388884 0.5432632943749995 0.5432632943749995) (0.6034147520033379 0.5430732768030042 0.5430732768030042) (0.6032036888040182 0.5428833199236164 0.5428833199236164) (0.6029926932247651 0.5426934239022886 0.5426934239022886) (0.6027817654486216 0.5425035889037595 0.5425035889037595) (0.6025709056578474 0.5423138150920627 0.5423138150920627) (0.6023601140339153 0.5421241026305238 0.5421241026305238) (0.6021493907575177 0.541934451681766 0.541934451681766) (0.6019387360085621 0.5417448624077059 0.5417448624077059) (0.6017281499661818 0.5415553349695637 0.5415553349695637) (0.6015176328087294 0.5413658695278565 0.5413658695278565) (0.6013071847137829 0.5411764662424046 0.5411764662424046) (0.6010968058581431 0.5409871252723288 0.5409871252723288) (0.600886496417847 0.5407978467760624 0.5407978467760624) (0.6006762565681535 0.5406086309113382 0.5406086309113382) (0.6004660864835534 0.5404194778351981 0.5404194778351981) (0.6002559863377781 0.5402303877040003 0.5402303877040003) (0.6000459563037855 0.540041360673407 0.540041360673407) (0.5998359965537745 0.539852396898397 0.539852396898397) (0.5996261072591823 0.5396634965332641 0.5396634965332641) (0.5994162885906889 0.53947465973162 0.53947465973162) (0.5992065407182102 0.5392858866463892 0.5392858866463892) (0.5989968638109141 0.5390971774298227 0.5390971774298227) (0.5987872580372064 0.5389085322334858 0.5389085322334858) (0.5985777235647486 0.5387199512082738 0.5387199512082738) (0.5983682605604433 0.538531434504399 0.538531434504399)

black←3⍴0

blue←0 0 1

camera_fview←3

camera_halfh←8

camera_halfw←7

camera_hsize←1

camera_inverse←5

camera_psize←6

camera_transform←4

camera_vsize←2

cone_closed←8

cone_maximum←7

cone_minimum←6

cyan←0 1 1

cylinder_closed←8

cylinder_maximum←7

cylinder_minimum←6

green←0 1 0

group_members←6

hit_distance←2

hit_eyev←4

hit_inside←6

hit_n1←10

hit_n2←11

hit_normalv←5

hit_object←1

hit_overpt←8

hit_point←3

hit_reflectv←7

hit_underpt←9

light_color←2

light_iteration←4

light_point←1

light_radius←3

magenta←1 0 1

material_ambient←2

material_color←1

material_diffuse←3

material_pattern←1

material_reflective←6

material_refractive←7

material_shininess←5

material_specular←4

material_transparency←8

obj_inverse←3

obj_material←4

obj_shadow←5

obj_tag←1

obj_transform←2

pat_blend←6

pat_checker←4

pat_gradient←2

pat_perlin←7

pat_perlingrad←8

pat_radgradient←5

pat_ring←3

pat_stripe←1

pat_test←0

pattern_color1←4

pattern_color2←5

pattern_inverse←3

pattern_transform←2

pattern_type←1

perlin_p←

ray_direction←2

ray_origin←1

red←1 0 0

shape_cone←5

shape_cube←3

shape_cylinder←4

shape_group←6

shape_plane←2

shape_smtriangle←8

shape_sphere←1

shape_test←0

shape_triangle←7

triangle_edges←7

triangle_normal←8

triangle_points←6

white←3⍴1

yellow←1 1 0


⍝ === End of variables definition ===

(⎕IO ⎕ML ⎕WX)←1 1 3

 NormRand←{                          ⍝ Random numbers with a normal distribution
     depth←10*9                           ⍝ randomness depth - can be larger from v14.0
     (x y)←⊂[1+⍳⍴,⍵](?(2,⍵)⍴depth)÷depth  ⍝ two random variables within ]0;1]
     ((¯2×⍟x)*0.5)×1○○2×y                 ⍝ Box-Muller distribution
 }

∇ r←text PutText name;tn
          ⍝ Write text to file (must be single byte text)
     
 :Trap 0
     tn←name ⎕NCREATE 0
 :Else
     tn←name ⎕NTIE 0
     0 ⎕NRESIZE tn
 :EndTrap
     
 r←text ⎕NAPPEND tn(⎕DR' ')
 ⎕NUNTIE tn
∇

 add_pattern_transform←{
       ⍝ pattern  pattern_transform  pattern → pattern
     p←⍺
     p[pattern_transform]←⊂⍵
     p[pattern_inverse]←⊂⌹⍵
     p
 }

 add_shape_transform←{
       ⍝ pattern  pattern_transform  pattern → pattern
     s←⍺
     s[obj_transform]←⊂⍵
     s[obj_inverse]←⊂⌹⍵
     s
 }

 blend_pattern←{pat_blend identity4 identity4 ⍺ ⍵}

∇ Z←camera W;half_view;aspect;halfh;halfv;psize
        ⍝ camera  hsize vsize field_of_view → camera_structure
 (hsize vsize fview)←W
 Z←hsize vsize fview(identity 4)(identity 4)
 half_view←3○0.5×fview
 aspect←hsize÷vsize
 :If aspect≥1
     halfw←half_view
     halfh←half_view÷aspect
 :Else
     halfw←half_view×aspect
     halfh←half_view
 :EndIf
 psize←2×halfw÷hsize
 Z←Z,psize,halfw,halfh
∇

 canvas←{(1↓⍵)⍴⊂(1↑⍵)⍴⊂0 0 0}

 canvas_to_ppm←{
        ⍝ Truncate negative numbers to zero, limit maximum to 255
     nums←⊃,/⊃,/255⌊⌈255×0⌈⍵
     shape←(⌊(⍴nums)÷15),15
     head←4 0⍕shape⍴nums
     tail←4 0⍕(-(⍴nums)-×/shape)↑nums
        ⍝ Must transpose ⍴⍵ to get width/height from columns/rows
     0=⍴tail:4 1⍴'P3'(⍕(⍴⊃⍵[1]),⍴⍵)'255'head
     5 1⍴'P3'(⍕(⍴⊃⍵[1]),⍴⍵)'255'head tail
 }

 check_axis←{
       ⍝ numeric  check_axis  numeric → numeric numeric
     emin←INFINITY×¯1-⍺
     emax←INFINITY×1-⍺
     (EPSILON>|⍵)∧emin>emax:emin emax
     EPSILON>|⍵:emax emin
     tmin←(¯1-⍺)÷⍵
     tmax←(1-⍺)÷⍵
     tmin>tmax:tmax tmin
     tmin tmax
 }

 check_cap←{
       ⍝ ray  check_cap  distance → Boolean
     x←(ray_origin 1⊃⍺)+⍵×ray_direction 1⊃⍺
     z←(ray_origin 3⊃⍺)+⍵×ray_direction 3⊃⍺
     1≥(x×x)+z×z
 }

 check_cap2←{
       ⍝ ray  check_cap2  distance radius → Boolean
     (d r)←⍵
     x←(ray_origin 1⊃⍺)+d×ray_direction 1⊃⍺
     z←(ray_origin 3⊃⍺)+d×ray_direction 3⊃⍺
     (r×r)≥(x×x)+z×z
 }

 checker_pattern←{pat_checker identity4 identity4 ⍺ ⍵}

 color_at←{
        ⍝ world  color_at  ray remaining → color
     (wray remaining)←⍵
     inter←⍺ intersect_world wray
        ⍝ Return black if no intersections
     0=≢inter:0 0 0
        ⍝ Take first positive intersection as the hit
     h←hit inter
        ⍝ Return black if no hit
     0=≢h:0 0 0
     comps←h prepare_computations wray
     comps←comps compute_n1n2 inter h
     ⍺ shade_hit comps remaining
 }

∇ Z←COMPS compute_n1n2 ARGS;XS;H;i;con;p;obj;last
       ⍝ COMPS  compute_n1n2  XS HIT → COMPS
       ⍝ Compute the n1 and n2 attributes
       ⍝ for a result returned by prepare_computations
       ⍝ Use immediately after prepare_computations
 (XS H)←ARGS
 Z←COMPS
 :If ~EVAL_REFRACTION
     :Return
 :EndIf
 con←⍬
 :For i :In XS
     obj←⊃i
         ⍝ Compute n1
     :If H≡i
         :If 0=≢con
             Z[hit_n1]←1
         :Else
             last←⊃¯1↑con
             Z[hit_n1]←⊂obj_material material_refractive⊃last
         :EndIf
     :EndIf
         ⍝ container and hit
     :If ⍬≡con
         con←⊂obj  ⍝ containers empty
     :Else
         p←con∊⊂obj  ⍝ see if object already in container
         :If 0=∨/p
             con,←⊂obj
         :Else
             con←(~p)/con
         :EndIf
     :EndIf
         ⍝ Compute n2
     :If H≡i
         :If 0=≢con
             Z[hit_n2]←1
         :Else
             last←⊃¯1↑con
             Z[hit_n2]←⊂obj_material material_refractive⊃last
         :EndIf
         :Leave
     :EndIf
 :EndFor
∇

∇ Z←cone
 Z←shape_cone identity4 identity4 material TRUE(¯1×INFINITY)INFINITY FALSE
∇

∇ Z←C cone_intersect R;a;b;c;disc;t0;t1;y0;y1;t
       ⍝ cone  cone_intersect  ray → ⍬ or intersection intersection
 Z←⍬
 a←-/(ray_direction⊃R)*2
 b←-/2×(ray_origin⊃R)×ray_direction⊃R
 c←ray_origin⊃R
 c←-/c[1 2 3]*2
 :If (EPSILON>|a)∧EPSILON<|b
     t←-c÷2×b
     Z←⊂C intersection t
 :ElseIf EPSILON<|a
     disc←(b*2)-4×a×c
     :If 0≤disc
         t0←((-b)-disc*0.5)÷2×a
         t1←((-b)+disc*0.5)÷2×a
         :If t0>t1
             t0 t1←t1 t0
         :EndIf
         y0←(ray_origin 2⊃R)+t0×ray_direction 2⊃R
         :If (y0>cone_minimum⊃C)∧y0<cone_maximum⊃C
             Z←⊂C intersection t0
         :EndIf
         y1←(ray_origin 2⊃R)+t1×ray_direction 2⊃R
         :If (y1>cone_minimum⊃C)∧y1<cone_maximum⊃C
             Z←Z,⊂C intersection t1
         :EndIf
     :EndIf
 :EndIf
     
       ⍝ Check for intersection with caps of closed cylinder
 :If (cone_closed⊃C)∧(EPSILON<|ray_direction 2⊃R)
     t←((cone_minimum⊃C)-ray_origin 2⊃R)÷ray_direction 2⊃R
     :If R check_cap2 t,cone_minimum⊃C
         Z←Z,⊂C intersection t
     :EndIf
     t←((cone_maximum⊃C)-ray_origin 2⊃R)÷ray_direction 2⊃R
     :If R check_cap2 t,cone_maximum⊃C
         Z←Z,⊂C intersection t
     :EndIf
 :EndIf
∇

 cone_normal_at←{
       ⍝ cone  cone_normal_at  point → vector
     dist←((1⊃⍵)*2)+(3⊃⍵)*2
     (cone_closed⊃⍺)∧(1>dist)∧(2⊃⍵)≥(cylinder_maximum⊃⍺)-EPSILON:vector 0 1 0
     (cone_closed⊃⍺)∧(1>dist)∧(2⊃⍵)≤(cylinder_minimum⊃⍺)+EPSILON:vector 0 ¯1 0
     y←(+/⍵[1 3]*2)*0.5
     (2⊃⍵)>0:vector(1⊃⍵)(¯1×y)(3⊃⍵)
     vector(1⊃⍵)y(3⊃⍵)
 }

 cross←{
        ⍝ vector  cross  vector → vector
        ⍝ a←(⍺[2]×⍵[3])-⍺[3]×⍵[2]
        ⍝ b←(⍺[3]×⍵[1])-⍺[1]×⍵[3]
        ⍝ c←(⍺[1]×⍵[2])-⍺[2]×⍵[1]
     
        ⍝ Pick runs about 10% faster on ]runtime benchmark
        ⍝ In real life rendering though, no noticable difference
     a←((2⊃⍺)×3⊃⍵)-(3⊃⍺)×2⊃⍵
     b←((3⊃⍺)×1⊃⍵)-(1⊃⍺)×3⊃⍵
     c←((1⊃⍺)×2⊃⍵)-(2⊃⍺)×1⊃⍵
     a,b,c,0
 }

∇ Z←cube
 Z←shape_cube identity4 identity4 material TRUE
∇

 cube_intersect←{
       ⍝ cube  cube_intersect  ray → intersection intersection
     ori←1⊃⍵
     dir←2⊃⍵
     xm←(1⊃ori)check_axis 1⊃dir
     ym←(2⊃ori)check_axis 2⊃dir
     zm←(3⊃ori)check_axis 3⊃dir
     tmin←⌈/(1⊃xm),(1⊃ym),1⊃zm
     tmax←⌊/(2⊃xm),(2⊃ym),2⊃zm
     tmin>tmax:⍬
     (⍺ tmin)(⍺ tmax)
 }

 cube_normal_at←{
       ⍝ cube  cube_normal_at  point → vector
     maxc←⌈/|⍵[1 2 3]
     maxc=|1⊃⍵:(1⊃⍵)0 0 0 ⍝ vector ⍵[1] 0 0
     maxc=|2⊃⍵:0(2⊃⍵)0 0 ⍝ vector 0 ⍵[2] 0
     0 0(⍵[3])0             ⍝ vector 0 0 ⍵[3]
 }

∇ Z←cylinder
 Z←shape_cylinder identity4 identity4 material TRUE(¯1×INFINITY)INFINITY FALSE
∇

∇ Z←CYL cylinder_intersect R;a;b;c;disc;t0;t1;y0;y1;t
       ⍝ cylinder  cylinder_intersect  ray → ⍬ or intersection intersection
 Z←⍬
 a←((ray_direction 1⊃R)*2)+(ray_direction 3⊃R)*2
 :If EPSILON<|a
     b←(2×(ray_origin 1⊃R)×ray_direction 1⊃R)+2×(ray_origin 3⊃R)×ray_direction 3⊃R
     c←¯1+((ray_origin 1⊃R)*2)+(ray_origin 3⊃R)*2
     disc←(b*2)-4×a×c
     :If 0<disc
         t0←((-b)-disc*0.5)÷2×a
         t1←((-b)+disc*0.5)÷2×a
         :If t0>t1
             t0 t1←t1 t0
         :EndIf
         y0←(ray_origin 2⊃R)+t0×ray_direction 2⊃R
         :If (y0>(cylinder_minimum⊃CYL))∧y0<cylinder_maximum⊃CYL
             Z←⊂CYL intersection t0
         :EndIf
         y1←(ray_origin 2⊃R)+t1×ray_direction 2⊃R
         :If (y1>(cylinder_minimum⊃CYL))∧y1<cylinder_maximum⊃CYL
             Z←Z,⊂CYL intersection t1
         :EndIf
     :EndIf
 :EndIf
     
       ⍝ Check for intersection with caps of closed cylinder
       ⍝ :If CYL[cylinder_closed]^(EPSILON<|2⌷⊃R[ray_direction])
 :If (cylinder_closed⊃CYL)∧EPSILON<|ray_direction 2⊃R
     t←((cylinder_minimum⊃CYL)-ray_origin 2⊃R)÷ray_direction 2⊃R
     :If R check_cap t
         Z←Z,⊂CYL intersection t
     :EndIf
     t←((cylinder_maximum⊃CYL)-ray_origin 2⊃R)÷ray_direction 2⊃R
     :If R check_cap t
         Z←Z,⊂CYL intersection t
     :EndIf
 :EndIf
∇

 cylinder_normal_at←{
       ⍝ cylinder  cylinder_normal_at  point → vector
       ⍝ dist← (⍵[1]*2)+⍵[3]*2
     dist←+/⍵[1 3]*2
     (cylinder_closed⊃⍺)∧(1>dist)∧(2⊃⍵)≥(cylinder_maximum⊃⍺)-EPSILON:vector 0 1 0
     (cylinder_closed⊃⍺)∧(1>dist)∧(2⊃⍵)≤EPSILON+cylinder_minimum⊃⍺:vector 0 ¯1 0
     vector(1⊃⍵)0(3⊃⍵)
 }

∇ Z←default_world;light;s1;s2;m
 light←(point ¯10 10 ¯10)point_light 1 1 1
 s1←sphere
 m←material
 m[material_color material_diffuse material_specular]←(0.8 1 0.6)0.7 0.2
 s1[obj_material]←⊂m
 s2←sphere
 s2[obj_transform]←⊂scaling 0.5 0.5 0.5
 s2[obj_inverse]←⊂⌹scaling 0.5 0.5 0.5
 Z←world
 Z[1],←⊂⊂light
 Z[2]←⊂⊂s1  ⍝ Have to enclose twice!
 Z[2],←⊂⊂s2
∇

 dot←{⍺+.×⍵}

 fade←{⍵×⍵×⍵×10+⍵×¯15+⍵×6}

∇ Z←G flatten_group T;gt;objs;objs
       ⍝ group  flatten_group  transform → list_of_shapes
 Z←⍬
 objs←⊃G[group_members]
 gt←⊃G[obj_transform]
 :For obj :In objs
     :If shape_group=obj[obj_tag]
         Z,←obj flatten_group gt
     :Else
         obj[obj_transform]←⊂T+.×gt+.×⊃obj[obj_transform]
         obj[obj_inverse]←⊂⌹⊃obj[obj_transform]
         Z,←⊂obj
     :EndIf
 :EndFor
∇

∇ Z←glass
 Z←(1 1 1)0.1 0.9 0.9 200 0 1.5 1
∇

∇ Z←glass_sphere
 Z←shape_sphere identity4 identity4 glass TRUE
∇

 grad←{
       ⍝ grad  hash x y z  →  scalar
     ⎕IO←0  ⍝ Index Origin is zero rather than 1
     (hash x y z)←⍵
     h←16|hash      ⍝ Low four bits
     u←(y x)[h<8]
     v←(y,(z x)[(h=12)∨h=14])[h≥4]
     ((u,-u)[2|h])+(v,-v)[2|⌊0.5×h]
 }

 gradient_pattern←{pat_gradient identity4 identity4 ⍺ ⍵}

∇ Z←group
 Z←shape_group identity4 identity4 TRUE ⍬ ⍬
∇

∇ Z←G group_intersect R;obj
       ⍝ group  group_intersect  ray → ⍬ or intersection_list
 Z←⍬
 :If ⍬≢⊃G[group_members]
     :For obj :In ⊃G[group_members]
         Z,←obj intersect R
     :EndFor
     :If ⍬≢Z
         Z←Z[⍋2⌷¨Z]
     :EndIf
 :EndIf
∇

 hit←{
       ⍝ hit  intersection_list → ⍬ or intersection
     ⍬≡⍵:⍬                ⍝ No list, no hit
     l←0≤hit_distance⌷¨⍵  ⍝ Positive distances
     0=∨/l:⍬              ⍝ Return null if none
     ⊃l/⍵                 ⍝ Return first from positives
 }

 identity←{⍵ ⍵⍴1,⍵⍴0}

∇ Z←identity4
 Z←identity 4
∇

 intersect←{
        ⍝ object  intersect  ray → ⍬ or intersection list
     t←obj_tag⊃⍺
        ⍝ m←⊃⍺[obj_transform]
        ⍝ local_ray← (⌹m) transform ⍵
        ⍝ local_ray← (⊃⍺[obj_inverse]) transform ⍵
     tm←obj_inverse⊃⍺
     local_ray←{tm+.×⍵}¨⍵
     shape_test=t:local_ray
     shape_sphere=t:⍺ sphere_intersect local_ray
     shape_plane=t:⍺ plane_intersect local_ray
     shape_cube=t:⍺ cube_intersect local_ray
     shape_cylinder=t:⍺ cylinder_intersect local_ray
     shape_cone=t:⍺ cone_intersect local_ray
     ⍬
 }

∇ Z←CYL intersect_caps R;t
 Z←⍬
       ⍝ cylinder  intersect_caps  ray → ⍬ or intersection intersection
 :If (0=cylinder_closed⊃CYL)∨EPSILON>|ray_direction 2⊃R
     :Return
 :EndIf
       ⍝ Check for intersection with lower end
 t←((cylinder_minimum⊃CYL)-ray_origin 2⊃R)÷ray_direction 2⊃R
 :If R check_cap t
     Z←Z,⊂CYL intersection t
 :EndIf
 t←((cylinder_maximum⊃CYL)-ray_origin 2⊃R)÷ray_direction 2⊃R
 :If R check_cap t
     Z←Z,⊂CYL intersection t
 :EndIf
∇

 intersect_world←{
        ⍝ world  intersect_world  ray → intersection list
     Z←⍬
     objs←⊃⍺[2]  ⍝ Using Pick INCREASES execution time!
     r←⍵
     fun←{~⍬≡⍵:{Z,←⊂⍵}¨⍵ ⋄ ⍵}
     x←fun¨{⍵ intersect r}¨objs
     ~⍬≡Z:Z[⍋2⊃¨Z]
     ⍬
 }

 intersect_world_nos←{
        ⍝ world  intersect_world_nos  ray → intersection list
     Z←⍬
     objs←⊃⍺[3]
     r←⍵
     objs←({obj_shadow⊃⍵}¨objs)/objs
     0=≢objs:⍬
     fun←{~⍬≡⍵:{Z,←⊂⍵}¨⍵ ⋄ ⍵}
     x←fun¨{⍵ intersect r}¨objs
     ~⍬≡Z:Z[⍋2⊃¨Z]
     ⍬
 }

 intersection←{⍺⍵}

 intersections←{⍵[⍋hit_distance⊃¨⍵]}

 is_shaded←{
       ⍝ world  is_shaded  point light  → numeric
     (p l)←⍵
     (0=l[light_radius])∧1≥l[light_iteration]:~⍺ is_shadowed ⍵
     w←⍺
     sample←{lpt←l ⋄ lpt[light_point]+←⊂⍵×point NormRand 3 ⋄ w is_shadowed p lpt}
     1-(+/sample¨l[light_iteration]⍴l[light_radius])÷l[light_iteration]
 }

 is_shadowed←{
        ⍝ world  is_shadowed  point light → Boolean
     (p l)←⍵   ⍝ point and light
     
        ⍝ lp←⊃l[light_point]
        ⍝ lp+←0.5×point ¯1+2×?0 0 0  ⍝ random scatter
        ⍝ lp+←0.15×point NormRand 3  ⍝ normal random scatter
        ⍝ v←lp-p
     
     v←(⊃l[light_point])-p
     dist←magnitude v
     dir←normalize v
     r←p ray dir
     inter←⍺ intersect_world r
     0=≢inter:0
        ⍝ Strip intersections that cast no shadow
     h←hit({hit_object obj_shadow⊃⍵}¨inter)/inter
     0=≢h:0
     h[hit_distance]<dist
 }

 lerp←{(t a b)←⍵ ⋄ a+t×b-a}

∇ Z←lighting Args;matl;light;pnt;eyev;normalv;insh;obj;clr;ec;lv;am;ldn;di;f;sp;rv;rde;i;sum
 (matl light pnt eyev normalv insh obj)←Args
 :If 3=≢⊃matl[material_color]
     clr←⊃matl[material_color]
 :Else
         ⍝ None of the earlier test cases have materials with patterns
     clr←(⊃matl[material_color])pattern_at_shape obj pnt
 :EndIf
     
 ec←clr×⊃light[light_color]      ⍝ Effective color
 am←ec×matl[material_ambient]
     
 sum←0 0 0
 :For i :In ⍳light[light_iteration]
     lv←normalize(⊃light[light_point])-pnt
     ldn←lv dot normalv
     :If ldn<0   ⍝ A little bit quicker checking insh than zeroing above
         di←0 0 0
         sp←0 0 0
     :Else
         di←ec×matl[material_diffuse]×ldn
         rv←(-lv)reflect normalv
         rde←(rv dot eyev)
         :If rde≤0
             sp←0 0 0
         :Else
             f←rde*matl[material_shininess]
             sp←matl[material_specular]×f×⊃light[light_color]
         :EndIf
     :EndIf
     sum+←di+sp
 :EndFor
 Z←am+insh×sum÷light[light_iteration]
∇

∇ Z←W llrender C;y;L
 L←{W C ⍵}¨¯1+⍳C[camera_vsize]
 Z←llrender_row #.ll.Each L
∇

∇ ROW←llrender_row ARGS;W;C;Y;dpnt;i;r;c
       ⍝ Render and return a single image row
 'RayTracer'#.⎕CY'C:\Users\Mark\Jupyter\rtdemo_ws'
 #.⎕PATH←'#.RayTracer'
      ⍝#.⎕CS'#.RayTracer'   ⍝ Not needed
     
 (W C Y)←ARGS
 dpnt←{r←C ray_for_pixel ⍵ Y ⋄ {⍵<#.RayTracer.EPSILON:0 ⋄ ⍵}¨W color_at r #.RayTracer.MAX_RECURSION}
     
 ROW←dpnt¨¯1+⍳C[#.RayTracer.camera_hsize]
∇

 magnitude←{(+/⍵*2)*0.5}

∇ Z←material
 Z←(1 1 1)0.1 0.9 0.9 200 0 1 0
∇

 normal_at←{
        ⍝ shape normal_at point → vector
     fixup←{
          ⍝ wn← (⍉(⌹⊃⍺[obj_transform])) +.× ⍵
         wn←(⍉obj_inverse⊃⍺)+.×⍵
         wn[4]←0
         normalize wn
     }
        ⍝ lp← ⍵⌹⊃⍺[obj_transform]   Doesn't work!?
        ⍝ lp← (⌹⊃⍺[obj_transform]) +.× ⍵
     lp←(obj_inverse⊃⍺)+.×⍵
     t←obj_tag⊃⍺
     shape_test=t:⍺ fixup vector lp[1 2 3]  ⍝ Here, or at end?
     shape_sphere=t:⍺ fixup ⍺ sphere_normal_at lp
        ⍝ Is this correct? plane_normal_at is a constant!
     shape_plane=t:⍺ fixup ⍺ plane_normal_at lp
     shape_cube=t:⍺ fixup ⍺ cube_normal_at lp
     shape_cylinder=t:⍺ fixup ⍺ cylinder_normal_at lp
     shape_cone=t:⍺ fixup ⍺ cone_normal_at lp
        ⍝ shape_triangle=t:   ⍺ triangle_normal_at         lp
        ⍝ shape_smtriangle=t: ⍺ smtriangle_normal_at       lp
     0 0 0 0
 }

 normalize←{⍵÷(+/(⍵*2))*0.5}

 pattern_at←{
       ⍝ pattern  pattern_at  point → color
       ⍝ assert (5=≢⍺)^4=≢⍵
     tag←pattern_type⊃⍺
     c1←pattern_color1⊃⍺
     c2←pattern_color2⊃⍺
     true_color←{3=≢⍵:⍵ ⋄ ⍵ pattern_at(pattern_inverse⊃⍵)+.×⍺}
     c1←⍵ true_color c1
     c2←⍵ true_color c2
     
       ⍝ assert (3=≢c1)^3=≢c2
       ⍝ Pattern used during testing
     tag=pat_test:3↑⍵
       ⍝ Stripe pattern
     (tag=pat_stripe)∧0=⌊2|1⊃⍵:c1  ⍝ Pick faster than Index
       ⍝ (tag=pat_stripe)^0≠⌊2|1⊃⍵: c2
     (tag=pat_stripe):c2
       ⍝ Gradient pattern
     tag=pat_gradient:c1+(c2-c1)×(1⊃⍵)-⌊1⊃⍵  ⍝ Pick faster than Index
       ⍝ Ring pattern
     (tag=pat_ring)∧0=⌊2|(+/⍵[1 3]×⍵[1 3])*0.5:c1
       ⍝ (tag=pat_ring)^0≠⌊2|(+/⍵[1 3]×⍵[1 3])*0.5: c2
     (tag=pat_ring):c2
       ⍝ Checker pattern
     (tag=pat_checker)∧0=2|+/⌊3↑⍵:c1
       ⍝ (tag=pat_checker)^0≠2|+/⌊3↑⍵: c2
     (tag=pat_checker):c2
       ⍝ Radial Gradient pattern
     m←magnitude ⍵
     tag=pat_radgradient:c1+(c2-c1)×m-⌊m
       ⍝ Blend pattern
     tag=pat_blend:0.5×c1+c2
       ⍝ Perlin noise Alternating pattern
     (tag=pat_perlin)∧0>perlin_noise ⍵[1 2 3]:c1
     (tag=pat_perlin):c2
       ⍝ Perlin noise Gradient pattern
     g←0.5×1+perlin_noise ⍵[1 2 3]
     tag=pat_perlingrad:c1+g×c2-c1
       ⍝ Unknown pattern
     0 0 0
 }

 pattern_at_shape←{
       ⍝ pattern  pattern_at_shape  object point → color
     (obj wpoint)←⍵
       ⍝ ⍺ pattern_at (⌹⊃⍺[pattern_transform]) +.× (⌹⊃obj[obj_transform]) +.× wpoint
     ⍺ pattern_at(pattern_inverse⊃⍺)+.×(obj_inverse⊃obj)+.×wpoint
 }

 perlin_noise←{
       ⍝ perlin_noise  x y z  →  scalar
     ⎕IO←0  ⍝ Index Origin is zero rather than 1
     (X Y Z)←256|⌊⍵
     (x y z)←⍵-⌊⍵
     (u v w)←fade x y z
     A←Y+perlin_p[X]
     (AA AB)←Z Z+perlin_p[A(A+1)]
     B←Y+perlin_p[X+1]
     (BA BB)←Z Z+perlin_p[B(B+1)]
     
     g1←grad(perlin_p[AA]),x,y,z
     g2←grad(perlin_p[BA]),(x-1),y,z
     l1←lerp u g1 g2
     g1←grad(perlin_p[AB]),x,(y-1),z
     g2←grad(perlin_p[BB]),(x-1),(y-1),z
     l2←lerp u g1 g2
     r1←lerp v l1 l2
     
     g1←grad(perlin_p[AA+1]),x,y,(z-1)
     g2←grad(perlin_p[BA+1]),(x-1),y,(z-1)
     l1←lerp u g1 g2
     g1←grad(perlin_p[AB+1]),x,(y-1),(z-1)
     g2←grad(perlin_p[BB+1]),(x-1),(y-1),(z-1)
     r2←lerp v,l1 l2
     lerp w r1 r2
 }

 perlin_pattern←{pat_perlin identity4 identity4 ⍺ ⍵}

 perlingrad_pattern←{pat_perlingrad identity4 identity4 ⍺ ⍵}

∇ Z←plane
 Z←shape_plane identity4 identity4 material TRUE
∇

 plane_intersect←{
        ⍝ plane plane_intersect ray → ⍬ or intersection_list
     (oy dy)←⍵[(ray_origin 2)(ray_direction 2)]
     EPSILON>|dy:⍬              ⍝ No intersection
     t←-oy÷dy                 ⍝ Distance
     ⊂⍺ t
 }

∇ Z←OBJ plane_normal_at R
       ⍝ plane  plane_normal_at  ray → vector
 Z←0 1 0 0
∇

 point←{⍵,1}

 point_light←{⍺ ⍵ 0 1}

 position←{(⊃⍺[ray_origin])+⍵×⊃⍺[ray_direction]}

 prepare_computations←{
     ⍝ intersection  prepare_computations  ray → hit
     Z←⍺,0,0,0,0,0,0,0,0,0
     Z[hit_point]←⊂⍵ position Z[hit_distance]
     Z[hit_eyev]←-⍵[ray_direction]
     Z[hit_normalv]←⊂(⊃Z[hit_object])normal_at⊃Z[hit_point]
     
     Z[hit_inside]←0>(⊃Z[hit_normalv])dot⊃Z[hit_eyev]
        ⍝ Z[hit_normalv]← Z[hit_normalv]×(1 ¯1)[1+hit_inside⊃Z]
     Z[hit_normalv]×←(1 ¯1)[1+hit_inside⊃Z]
        ⍝ Note the arithmetic with enclosed vectors!
     Z[hit_overpt]←Z[hit_point]+Z[hit_normalv]×EPSILON ⍝ Added for acne
     Z[hit_underpt]←Z[hit_point]-Z[hit_normalv]×EPSILON ⍝ Added for acne
        ⍝ I forgot to disclose, causing failure in reflection!
     Z[hit_reflectv]←⊂(⊃⍵[ray_direction])reflect⊃Z[hit_normalv]
     Z
 }

 radgrad_pattern←{pat_radgradient identity4 identity4 ⍺ ⍵}

 ray←{⍺⍵}

 ray_for_pixel←{
        ⍝ camera ray_for_pixel x y → ray
     (px py)←⍵
     xoffset←(camera_psize⊃⍺)×px+0.5
     yoffset←(camera_psize⊃⍺)×py+0.5
     world_x←(camera_halfw⊃⍺)-xoffset
     world_y←(camera_halfh⊃⍺)-yoffset
        ⍝ This is actually slightly slower than the above!
        ⍝ world_x← ⍺[camera_halfw]-⍺[camera_psize]×px+0.5
        ⍝ world_y← ⍺[camera_halfh]-⍺[camera_psize]×py+0.5
        ⍝ it←      ⌹⊃⍺[camera_transform]
     it←camera_inverse⊃⍺
     pixel←it+.×point world_x world_y ¯1
     origin←it+.×point 0 0 0
     directn←normalize pixel-origin
     origin ray directn
 }

 reflect←{⍺-⍵×2×⍺ dot ⍵}

 reflected_color←{
        ⍝ world  reflected_color  comps remaining → color
     ~EVAL_REFLECTION:0 0 0
        ⍝ Limit recursion. Set RECURSE before calling
     (comps remaining)←⍵
     0≥remaining:0 0 0   ⍝ black if too deep
        ⍝
     o←⊃comps[hit_object]
     m←⊃o[obj_material]
     0=m[material_reflective]:0 0 0
     rray←(⊃comps[hit_overpt])ray⊃comps[hit_reflectv]
     c←⍺ color_at rray(remaining-1)
     c×m[material_reflective]
 }

 refracted_color←{
       ⍝ world  refracted_color  comps → color
     ~EVAL_REFRACTION:0 0 0
       ⍝ Fixes #5 but breaks #8
       ⍝ Infinite loop: refracted_color, color_at, shade_hit
     (comps remaining)←⍵
     0≥remaining:0 0 0  ⍝ Added for Test#5
       ⍝ Black if object is opaque
     0=hit_object obj_material material_transparency⊃comps:0 0 0
     
     n_ratio←(hit_n1⊃comps)÷hit_n2⊃comps
     cos_i←(hit_eyev⊃comps)dot hit_normalv⊃comps
     sin2_t←(1-cos_i*2)×n_ratio*2
       ⍝
     1<sin2_t:0 0 0
       ⍝
     cos_t←(1-sin2_t)*0.5
     dir←((hit_normalv⊃comps)×((n_ratio×cos_i)-cos_t))-(hit_eyev⊃comps)×n_ratio
     rray←(hit_underpt⊃comps)ray dir
     color←⍺ color_at rray(remaining-1)
     (hit_object obj_material material_transparency⊃comps)×color
 }

∇ Z←W render C;y
        ⍝ world  render  camera → canvas
     
        ⍝ drow← {W render_row C ⍵}
        ⍝ Z← drow¨¯1+⍳C[camera_vsize]
     
 Z←C[camera_vsize]⍴0
 :For y :In ¯1+⍳C[camera_vsize]
     Z[y+1]←⊂W render_row C y
 :EndFor
∇

∇ ROW←W render_row ARGS;C;Y;dpnt;i;r;c
       ⍝ Render and return a single image row
       ⍝ world  render_row  camera x\y
       ⍝ x is row number
 (C Y)←ARGS
 dpnt←{r←C ray_for_pixel ⍵ Y ⋄ {⍵<EPSILON:0 ⋄ ⍵}¨W color_at r MAX_RECURSION}
     
       ⍝ ROW←dpnt¨¯1+⍳C[camera_hsize]
     
 ROW←C[camera_hsize]⍴⊂0 0 0
 :For i :In ¯1+⍳C[camera_hsize]
     ROW[i+1]←⊂dpnt i
 :EndFor
∇

 ring_pattern←{pat_ring identity4 identity4 ⍺ ⍵}

 rotation_x←{
        ⍝ rotation_x  angle_in_radians → transform_matrix
     idn←identity4
     idn[(2 2)(2 3)(3 2)(3 3)]←(2○⍵)(-(1○⍵))(1○⍵)(2○⍵)
     idn
 }

 rotation_y←{
        ⍝ rotation_x  angle_in_radians → transform_matrix
     idn←identity4
     idn[(1 1)(1 3)(3 1)(3 3)]←(2○⍵)(1○⍵)(-(1○⍵))(2○⍵)
     idn
 }

 rotation_z←{
        ⍝ rotation_x  angle_in_radians → transform_matrix
     idn←identity4
     idn[(1 1)(1 2)(2 1)(2 2)]←(2○⍵)(-(1○⍵))(1○⍵)(2○⍵)
     idn
 }

 savePPM←{
        ⍝ filename  savePPM  output_data
     (s,((1↑⍴s←⍕⍵),1)⍴⎕UCS 10)PutText ⍺
 }

 scaling←{
        ⍝ scaling  x y z → transform_matrix
     idn←identity4
     idn[(1 1)(2 2)(3 3)]←⍵
     idn
 }

∇ Z←schlick COMPS;cos;n;sin2_t;cos_t;r0
       ⍝ schlick  comps (updated by compute_n1n2)
 cos←(⊃COMPS[hit_eyev])dot⊃COMPS[hit_normalv]
 :If COMPS[hit_n1]>COMPS[hit_n2]
     n←COMPS[hit_n1]÷COMPS[hit_n2]
     sin2_t←(1-cos*2)×n*2
     :If sin2_t>1
         Z←1
         :Return
     :EndIf
     cos←(1-sin2_t)*0.5
 :EndIf
 r0←((COMPS[hit_n1]-COMPS[hit_n2])÷(COMPS[hit_n1]+COMPS[hit_n2]))*2
 Z←r0+(1-r0)×(1-cos)*5
∇

 shade_hit←{
     ⍝ world  shade_hit  comps remaining → color
     (comps remaining)←⍵
     w←⍺
     obj←⊃comps[hit_object]
     mtrl←⊃obj[obj_material]
     dolight←{
          ⍝ insh← w is_shadowed (⊃comps[hit_overpt]) ⍵
         insh←w is_shaded(⊃comps[hit_overpt])⍵
         lighting mtrl ⍵(⊃comps[hit_overpt])(⊃comps[hit_eyev])(⊃comps[hit_normalv])insh obj
     }
     surface←⊃+/dolight¨⊃⍺[1]  ⍝ sum enclosed colors, unenclose result
     reflected←⍺ reflected_color ⍵
     refracted←⍺ refracted_color ⍵
     flag←∧/0<mtrl[material_reflective material_transparency]
     reflectance←schlick comps
     1=flag:surface+(refracted×1-reflectance)+reflected×reflectance
     surface+reflected+refracted
 }

 shearing←{
        ⍝ shearing  xy xz yx yz zx zy → transform_matrix
     idn←identity4
     idn[(1 2)(1 3)(2 1)(2 3)(3 1)(3 2)]←⍵
     idn
 }

∇ Z←sphere
 Z←shape_sphere identity4 identity4 material TRUE
∇

 sphere_intersect←{
       ⍝ sphere  intersect  ray → ⍬ or intersection_list
     s2r←(ray_origin⊃⍵)-0 0 0 1
     a←(ray_direction⊃⍵)dot ray_direction⊃⍵
     b←2×(ray_direction⊃⍵)dot s2r
     c←¯1+s2r dot s2r
     d←(b×b)-4×a×c
     d<0:⍬
     t1←((-b)-d*0.5)÷2×a  ⍝ Clean this up!!!
     t2←((-b)+d*0.5)÷2×a
     (⍺ t1)(⍺ t2)
 }

 sphere_normal_at←{
       ⍝ ⍺=sphere  normal_at  ⍵=point → vector
     on←⍵-0 0 0 1         ⍝ Creates vector from origin
       ⍝ wn← (⍉⌹⊃⍺[obj_transform]) +.× on
     wn←(⍉obj_inverse⊃⍺)+.×on
     wn[4]←0                ⍝ Make world_normal a vector
     normalize wn
 }

 stripe_pattern←{pat_stripe identity4 identity4 ⍺ ⍵}

∇ Z←test_pattern
 Z←pat_test identity4 identity4(0 0 0)(1 1 1)
∇

∇ Z←test_shape
 Z←shape_test identity4 identity4 material TRUE
∇

 transform←{tm←⍺ ⋄ {tm+.×⍵}¨⍵}

 translation←{
        ⍝ translation  x y z → transform_matrix
     idn←identity4
     idn[(1 4)(2 4)(3 4)]←⍵
     idn
 }

 triangle←{
       ⍝ triangle  p1 p2 p3 → shape_triangle identity4 material points edges normalv
     edges←(⍵[2]-⍵[1]),(⍵[3]-⍵[1])
     normv←normalize(⊃edges[2])cross⊃edges[1]
     shape_triangle identity4 identity4 material TRUE(⍵)edges normv
 }

 vector←{⍵,0}

 view_transform←{
        ⍝ view_transform from to up → transform_matrix
     (from to up)←⍵
     forward←normalize to-from
     left←forward cross normalize up
     true_up←left cross forward
     orientation←left[1],left[2],left[3],0,true_up[1],true_up[2],true_up[3],0
     orientation,←(-forward[1 2 3]),0,0,0,0,1
     orientation←4 4⍴orientation
     orientation+.×translation-from[1 2 3]
 }

∇ Z←world
 Z←⍬ ⍬
∇

∇ W wrender C;Win;y
        ⍝ world  render  camera → canvas
     
 '#'⎕WS'Coord' 'Pixel'
 y←(C[camera_vsize]+41)(C[camera_hsize]+1)
 'Win'⎕WC'Form' 'RayTracer'('Size'y)
 'Win'⎕WS('Event' 1001 'wrender_row')
 'Win.quit'⎕WC'Button' 'Quit'(10 20)(25 60)
 'Win.quit'⎕WS('Event' 'Select' 1)('Cancel' 1)
 'Win.line'⎕WC'Text' 'Line '(20 100)
 ⎕NQ'Win' 1001(0(¯1+C[camera_vsize]))
 ⎕DQ'Win'
∇

∇ wrender_row Msg;x;y;yend;colors;Pnts
 y←3 1⊃Msg
 yend←3 2⊃Msg
 :If y≤yend
     Z←W render_row C y
     colors←255⌊⌊255×Z
     y←y+1
     Pnts←{((y+40)(y+40))(⍵(1+⍵))}¨⍳⍴colors
     'Win.line'⎕WS'Text'('Line ',⍕y)
     ('Win.L',⍕y)⎕WC'Poly'(Pnts)('FCol'(colors))
     ⎕NQ'Win' 1001(y yend)
 :EndIf
∇

:EndNamespace 
